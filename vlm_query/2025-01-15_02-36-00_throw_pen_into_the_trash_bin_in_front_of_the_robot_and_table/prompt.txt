## Instructions
Suppose you are controlling a robot to perform object throwing tasks. The task is given as an image of the environment, overlayed with keypoints marked with their indices. Followings are your role and goal:
- Assmue you have already controlled the robot to successfully grasp the object. But you don't know the position of object and end-effector after grasp.
- The goal of your task is to then control the robot to throw the grasped object into the trash bin in front of the robot.
- You need to determine both subgoals and constraints by writing Python functions.
- The task contains following stages: 
    - prepare stage: move end-effector to a good starting position aligned with the trash bin.
    - accelerate stage: end-effector and object move along a trajectory to accelerate object starting at the starting position determined at prepare stage. end-effector should release and throw away object at a certain release point, release angle and release speed so that object will fall into trash bin along a parabola.
Please perform following steps:
- Write and compute following "sub-goals":
    - a reasonable "starting point" for prepare stage for efficient acceleration and throwing.
    - a trajectory of accelerate stage where robot accelerate object.
    - a parabola after acceleration where object fall into trash bin.
    - reasonable "release point", "release angle", "release speed".
    - reasonable assumption of the mass of the object based on general knowledge.
- For each stage, write two kinds of constraints, "sub-goal constraints" and "path constraints". The "sub-goal constraints" are constraints that enforced to satisfy certain sub-goals and must be satisfied **at the end of the stage**, while the "path constraints" are constraints that must be satisfied **within the stage**. Some examples:
    - prepare stage:
        - 1 sub-goal constraint: "end-effector must reach "starting point" for prepare stage"
        - 0 path constraints
    - accelerate stage:
        - 3 sub-goal constraints: "end-effector must reach release point", "end-effector must reach release angle" and "end-effector must reach release speed".
        - 2 path constraints: "end-effector must move along a certain trajectory to accelerate object", "end-effector must move with certain speed or acceleration along trajecotry in order to reach release speed".

**Note:**
- Each constraint takes a dummy end-effector point and a set of keypoints as input and returns a numerical cost, where the constraint is satisfied if the cost is smaller than or equal to zero.
- Inputs to the constraints and sub-goals are as follows:
  - `end_effector`: np.array of shape `(3,)` representing the end-effector position at any moment.
  - `keypoints`: np.array of shape `(K, 3)` representing the keypoint positions at any moment.
- You may write 0 or more "sub-goals" to faciliate the solution and you may use end-effector point and a set of keypoints to faciliate computation.
- For each stage, you may write 0 or more "sub-goal constraints" and 0 or more "path constraints".
- Avoid using "if" statements in your constraints.
- You do not need to consider collision avoidance. Focus on what is necessary to complete the task.
- Before object is released, you could assume the object position is the same as the end-effector position as end-effector will not release object before successful acceleration.
- You may apply the position of keypoints to compute the spacial relationship, for instance the lenght of pen, the distance between object and trash bin.
- Inside of each function, you may use native Python functions, any NumPy functions.
- The robot can only grasp one object at a time.
- You may make a resonable assumption of the mass of the object based on the image of the environment, the keypoint positions and your general knowledge.
- You may use two keypoints to form a vector, which can be used to specify a rotation (by specifying the angle between the vector and a fixed axis).
- You may focus on keypoints on objects and trash bin.
- You may use multiple keypoints to specify a surface or volume.
- The keypoints marked on the image start with index 0, same as the given argument `keypoints` array.
- For a point `i` to be relative to another point `j`, the function should define an `offsetted_point` variable that has the delta added to keypoint `j and then calculate the norm of the xyz coordinates of the keypoint `i` and the `offsetted_point`.
- If you would like to specify a location not marked by a keypoint, try using multiple keypoints to specify the location (e.g., you may take the mean of multiple keypoints if the desired location is in the center of those keypoints).

**Structure your output in a single python code block as follows:**
```python

# Your explanation of how many constraints you have and what each sub-goal and constraint is about.
# ...

num_subgoals = ?
num_constraints = ?

### sub-goals (if any)
def sub-goals1(end_effector, keypoints):
    """Put your explanation here."""
    ...
# Add more sub-goals if needed
...

### stage 1 sub-goal constraints (if any)
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Put your explanation here."""
    ...
    return cost
# Add more sub-goal constraints if needed
...

### stage 1 path constraints (if any)
def stage1_path_constraint1(end_effector, keypoints):
    """Put your explanation here."""
    ...
    return cost
# Add more path constraints if needed
...

# repeat for more stages
...

```

## Query
Query Task: "throw pen into the trash bin in front of the robot and table"
Query Image: